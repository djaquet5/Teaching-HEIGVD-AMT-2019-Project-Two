swagger: '2.0'
info:
  version: '0.1.0'
  title: OfficialLeague USER API
  description: An API to manage an american football league
host: localhost:8080
basePath: /api
schemes:
  - http
parameters:
  token:
    in: header
    name: Authorization
    type: string
    required: true

paths:
#  /connection:
#    post:
#      description: user connection
#      operationId: login
#      produces:
#        - application/json
#      consumes:
#        - application/json
#      parameters:
#        - name: credentials
#          in: body
#          required: true
#          schema:
#            $ref: '#/definitions/Credentials'
#      responses:
#        '200':
#          description: successfuly loged in
#          schema:
#            type: object
#            $ref: '#/definitions/Token'
#        '401':
#          description: unvalid credentials
#        '500':
#          description: token generation failure

  /users:
    get:
      description: Get the list of all users
      operationId: getUsers
      produces:
        - application/json
      responses:
        '200':
          description: success
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        '403':
          description: forbidden
    post:
      description: Create a user
      operationId: createUsers
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserDTO'
      responses:
        '201':
          description: created
        '403':
          description: forbidded

  /users/{userid}:
    parameters:
      - name: userid
        in: path
        required: true
        type: integer

    get:
      description: Get a user by id
      operationId: getUserById
      produces:
        - application/json
      responses:
        '200':
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/User'
        '403':
          description: forbidden
        '404':
          description: user not found

    put:
      description: Update a user by id
      operationId: updateUserById
      consumes:
        - application/json
      parameters:
        - name: user
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserDTO'
      responses:
        '204':
          description: User updated successfully
        '403':
          description: Forbidden
        '404':
          description: User not found

    delete:
      description: Delete a user by id
      operationId: deleteUserById
      responses:
        '204':
          description: user deleted successfully
        '403':
          description: forbidden
        '404':
          description: user not found
definitions:
  User:
    type: object
    properties:
      id:
        type: integer
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
      role:
        type: string

  UserDTO:
    type: object
    properties:
      firstname:
        type: string
      lastname:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
      role:
        type: string